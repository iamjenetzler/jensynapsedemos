{
	"name": "Notebook 2",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "spark1",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "9f021123-4296-4804-ade8-4ec0bf36a641"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/b9913441-8a8e-4fb1-812a-9fcbe1dd9aba/resourceGroups/Synapse580/providers/Microsoft.Synapse/workspaces/synapse580/bigDataPools/spark1",
				"name": "spark1",
				"type": "Spark",
				"endpoint": "https://synapse580.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark1",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "2.4",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df = spark.read.load('abfss://workspace@synapse580.dfs.core.windows.net/Finance/WA_Fn-UseC_-Accounts-Receivable (1).csv', format='csv'\r\n",
					"## If header exists uncomment line below\r\n",
					", header=True\r\n",
					")\r\n",
					"df.write.mode(\"overwrite\").saveAsTable(\"default.anomaly_detector_testing_data\")"
				],
				"execution_count": 61
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"from mmlspark.cognitive import *\n",
					"from notebookutils import mssparkutils\n",
					"from pyspark.sql.functions import col\n",
					"from pyspark.sql.types import DoubleType, TimestampType\n",
					"from pyspark.sql.functions import unix_timestamp, to_timestamp, date_format\n",
					"\n",
					"\n",
					"# Load the data into a Spark DataFrame\n",
					"df = spark.sql(\"SELECT DueDate, DaysLate, case when DaysLate > 0 then 1 else 0 end as Late_Yes_or_No, customerID FROM default.anomaly_detector_testing_data\") \\\n",
					"    .withColumn(\"DaysLate\", col(\"DaysLate\").cast(DoubleType())) \\\n",
					"    .withColumn(\"DueDateDT\", date_format(\\\n",
					"        to_timestamp(col(\"DueDate\"), \"M/dd/yyyy\"),\\\n",
					"        \"yyyy-MM-dd'T'HH:mm:ssXXX\"))\\\n",
					"    .sort(col(\"DueDateDT\"), ascending=True)\n",
					" \n",
					"#.withColumn(\"DueDateDT\", unix_timestamp(col(\"DueDate\"),'M/dd/yyyy').cast(TimestampType())) \\\n",
					"#1972-01-01T00:00:00Z\n",
					"#M/dd/yyyy\n",
					"#'yyy-MM-dd HH:mm:ss'\n",
					"#.sql(\"SELECT DueDate, date_format(to_date(DueDate,'M/dd/yyyy'),''yyyy-MM-dd'T'HH:mm:ssXXX'') DueDateDT, DaysLate, customerID FROM default.anomaly_detector_testing_data\") \\\n",
					"\n",
					"\n",
					"\n",
					"df.show(10)\n",
					"\n",
					"anomalyDetector = (SimpleDetectAnomalies()\n",
					"    .setLinkedService(\"pbifinance_anomolydetector\")\n",
					"    .setOutputCol(\"output\")\n",
					"    .setErrorCol(\"error\")\n",
					"    .setGranularity(\"daily\")\n",
					"    .setTimestampCol(\"DueDateDT\")\n",
					"    .setValueCol(\"DaysLate\")    \n",
					"    .setGroupbyCol(\"customerID\")       \n",
					"     )\n",
					"\n",
					"results = anomalyDetector.transform(df)\n",
					"\n",
					"# Show the results\n",
					"display(results.select(\"customerID\", \"DueDate\", \"DaysLate\", \"output.*\", \"error\").limit(10))"
				],
				"execution_count": 138
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Sample \r\n",
					"\r\n",
					"from pyspark.sql.functions import lit\r\n",
					"\r\n",
					"df = spark.createDataFrame([\r\n",
					"    (\"1972-01-01T00:00:00Z\", 826.0),\r\n",
					"    (\"1972-02-01T00:00:00Z\", 799.0),\r\n",
					"    (\"1972-03-01T00:00:00Z\", 890.0),\r\n",
					"    (\"1972-04-01T00:00:00Z\", 900.0),\r\n",
					"    (\"1972-05-01T00:00:00Z\", 766.0),\r\n",
					"    (\"1972-06-01T00:00:00Z\", 805.0),\r\n",
					"    (\"1972-07-01T00:00:00Z\", 821.0),\r\n",
					"    (\"1972-08-01T00:00:00Z\", 20000.0),\r\n",
					"    (\"1972-09-01T00:00:00Z\", 883.0),\r\n",
					"    (\"1972-10-01T00:00:00Z\", 898.0),\r\n",
					"    (\"1972-11-01T00:00:00Z\", 957.0),\r\n",
					"    (\"1972-12-01T00:00:00Z\", 924.0),\r\n",
					"    (\"1973-01-01T00:00:00Z\", 881.0),\r\n",
					"    (\"1973-02-01T00:00:00Z\", 837.0),\r\n",
					"    (\"1973-03-01T00:00:00Z\", 9000.0)\r\n",
					"], [\"timestamp\", \"value\"]).withColumn(\"group\", lit(\"series1\"))\r\n",
					"\r\n",
					"df.write.mode(\"overwrite\").saveAsTable(\"anomaly_detector_testing_data\")"
				],
				"execution_count": 51
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"#Sample\r\n",
					"\r\n",
					"from mmlspark.cognitive import *\r\n",
					"from notebookutils import mssparkutils\r\n",
					"\r\n",
					"\r\n",
					"# Load the data into a Spark DataFrame\r\n",
					"df = spark.sql(\"SELECT * FROM default.anomaly_detector_testing_data\")\r\n",
					"\r\n",
					"anomalyDetector = (SimpleDetectAnomalies()\r\n",
					"    .setLinkedService(\"pbifinance_anomolydetector\")\r\n",
					"    .setOutputCol(\"output\")\r\n",
					"    .setErrorCol(\"error\")\r\n",
					"    .setGranularity(\"monthly\")\r\n",
					"    .setTimestampCol(\"timestamp\")\r\n",
					"    .setValueCol(\"value\")\r\n",
					"    .setGroupbyCol(\"group\"))\r\n",
					"\r\n",
					"results = anomalyDetector.transform(df)\r\n",
					"\r\n",
					"# Show the results\r\n",
					"display(results.select(\"timestamp\", \"value\", \"group\", \"output.*\", \"error\").limit(10))"
				],
				"execution_count": 52
			}
		]
	}
}