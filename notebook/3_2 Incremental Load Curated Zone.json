{
	"name": "3_2 Incremental Load Curated Zone",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkpool1",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "112g",
			"driverCores": 16,
			"executorMemory": "112g",
			"executorCores": 16,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "8b9c178d-fe1c-4022-9b9b-29faf22ca57b"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/b9913441-8a8e-4fb1-812a-9fcbe1dd9aba/resourceGroups/synapsehack/providers/Microsoft.Synapse/workspaces/synapsehackws/bigDataPools/sparkpool1",
				"name": "sparkpool1",
				"type": "Spark",
				"endpoint": "https://synapsehackws.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpool1",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "3.1",
				"nodeCount": 10,
				"cores": 16,
				"memory": 112
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Data Merge"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import datetime  \r\n",
					"from delta.tables import *\r\n",
					"\r\n",
					"# Set the strorage path info\r\n",
					"account_name = 'synapsehackstor' # fill in your primary storage account name\r\n",
					"enriched_container = 'enriched'\r\n",
					"curated_container = 'curated' # fill in your container name\r\n",
					"\r\n",
					"\r\n",
					"enriched_adls_path = 'abfss://%s@%s.dfs.core.windows.net/' % (enriched_container, account_name)\r\n",
					"curated_adls_path = 'abfss://%s@%s.dfs.core.windows.net/' % (curated_container, account_name)\r\n",
					"\r\n",
					"print('Enriched storage account path: ' + enriched_adls_path)\r\n",
					"print('Curated storage account path: ' + curated_adls_path)\r\n",
					"\r\n",
					"now = datetime.datetime.now()\r\n",
					"print (now.strftime(\"%Y-%m-%d %H:%M:%S\"))"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from delta.tables import *\r\n",
					"domain = \"call_center\"\r\n",
					"\r\n",
					"deltaTable = DeltaTable.forPath(spark, curated_adls_path + domain)\r\n",
					"\r\n",
					"enriched_path = enriched_adls_path + now.strftime(\"%Y-%m-%d\") + '/' + domain + '/*.parquet'\r\n",
					"updatesDF = spark.read.format(\"parquet\").load(enriched_path)\r\n",
					"\r\n",
					"deltaTable.alias(\"call_center\").merge(\r\n",
					"     updatesDF.alias(\"updates\"),\r\n",
					"     \"call_center.cc_call_center_sk = updates.cc_call_center_sk\") \\\r\n",
					"   .whenMatchedUpdate(set = \r\n",
					"        {\r\n",
					"            \"cc_call_center_id\":\"updates.cc_call_center_id\",\r\n",
					"            \"cc_rec_start_date\":\"updates.cc_rec_start_date\",\r\n",
					"            \"cc_rec_end_date\":\"updates.cc_rec_end_date\",\r\n",
					"            \"cc_closed_date_sk\":\"updates.cc_closed_date_sk\",\r\n",
					"            \"cc_open_date_sk\":\"updates.cc_open_date_sk\",\r\n",
					"            \"cc_name\":\"updates.cc_name\",\r\n",
					"            \"cc_class\":\"updates.cc_class\",\r\n",
					"            \"cc_employees\":\"updates.cc_employees\",\r\n",
					"            \"cc_sq_ft\":\"updates.cc_sq_ft\",\r\n",
					"            \"cc_hours\":\"updates.cc_hours\",\r\n",
					"            \"cc_manager\":\"updates.cc_manager\",\r\n",
					"            \"cc_mkt_id\":\"updates.cc_mkt_id\",\r\n",
					"            \"cc_mkt_class\":\"updates.cc_mkt_class\",\r\n",
					"            \"cc_mkt_desc\":\"updates.cc_mkt_desc\",\r\n",
					"            \"cc_market_manager\":\"updates.cc_market_manager\",\r\n",
					"            \"cc_division\":\"updates.cc_division\",\r\n",
					"            \"cc_division_name\":\"updates.cc_division_name\",\r\n",
					"            \"cc_company\":\"updates.cc_company\",\r\n",
					"            \"cc_company_name\":\"updates.cc_company_name\",\r\n",
					"            \"cc_street_number\":\"updates.cc_street_number\",\r\n",
					"            \"cc_street_name\":\"updates.cc_street_name\",\r\n",
					"            \"cc_street_type\":\"updates.cc_street_type\",\r\n",
					"            \"cc_suite_number\":\"updates.cc_suite_number\",\r\n",
					"            \"cc_city\":\"updates.cc_city\",\r\n",
					"            \"cc_county\":\"updates.cc_county\",\r\n",
					"            \"cc_state\":\"updates.cc_state\",\r\n",
					"            \"cc_zip\":\"updates.cc_zip\",\r\n",
					"            \"cc_country\":\"updates.cc_country\",\r\n",
					"            \"cc_gmt_offset\":\"updates.cc_gmt_offset\",\r\n",
					"            \"cc_tax_percentage\":\"updates.cc_tax_percentage\"\r\n",
					"        } \r\n",
					"    ) \\\r\n",
					"   .whenNotMatchedInsert(values =\r\n",
					"     {\r\n",
					"            \"cc_call_center_sk\":\"updates.cc_call_center_sk\",\r\n",
					"            \"cc_call_center_id\":\"updates.cc_call_center_id\",\r\n",
					"            \"cc_rec_start_date\":\"updates.cc_rec_start_date\",\r\n",
					"            \"cc_rec_end_date\":\"updates.cc_rec_end_date\",\r\n",
					"            \"cc_closed_date_sk\":\"updates.cc_closed_date_sk\",\r\n",
					"            \"cc_open_date_sk\":\"updates.cc_open_date_sk\",\r\n",
					"            \"cc_name\":\"updates.cc_name\",\r\n",
					"            \"cc_class\":\"updates.cc_class\",\r\n",
					"            \"cc_employees\":\"updates.cc_employees\",\r\n",
					"            \"cc_sq_ft\":\"updates.cc_sq_ft\",\r\n",
					"            \"cc_hours\":\"updates.cc_hours\",\r\n",
					"            \"cc_manager\":\"updates.cc_manager\",\r\n",
					"            \"cc_mkt_id\":\"updates.cc_mkt_id\",\r\n",
					"            \"cc_mkt_class\":\"updates.cc_mkt_class\",\r\n",
					"            \"cc_mkt_desc\":\"updates.cc_mkt_desc\",\r\n",
					"            \"cc_market_manager\":\"updates.cc_market_manager\",\r\n",
					"            \"cc_division\":\"updates.cc_division\",\r\n",
					"            \"cc_division_name\":\"updates.cc_division_name\",\r\n",
					"            \"cc_company\":\"updates.cc_company\",\r\n",
					"            \"cc_company_name\":\"updates.cc_company_name\",\r\n",
					"            \"cc_street_number\":\"updates.cc_street_number\",\r\n",
					"            \"cc_street_name\":\"updates.cc_street_name\",\r\n",
					"            \"cc_street_type\":\"updates.cc_street_type\",\r\n",
					"            \"cc_suite_number\":\"updates.cc_suite_number\",\r\n",
					"            \"cc_city\":\"updates.cc_city\",\r\n",
					"            \"cc_county\":\"updates.cc_county\",\r\n",
					"            \"cc_state\":\"updates.cc_state\",\r\n",
					"            \"cc_zip\":\"updates.cc_zip\",\r\n",
					"            \"cc_country\":\"updates.cc_country\",\r\n",
					"            \"cc_gmt_offset\":\"updates.cc_gmt_offset\",\r\n",
					"            \"cc_tax_percentage\":\"updates.cc_tax_percentage\"\r\n",
					"     }\r\n",
					"   ) \\\r\n",
					"   .execute()"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from delta.tables import *\r\n",
					"domain = \"catalog_sales\"\r\n",
					"\r\n",
					"deltaTable = DeltaTable.forPath(spark, curated_adls_path + domain)\r\n",
					"\r\n",
					"enriched_path = enriched_adls_path + now.strftime(\"%Y-%m-%d\") + '/' + domain + '/d_year=*/d_qoy=*/d_moy=*/*.parquet'\r\n",
					"updatesDF = spark.read.format(\"parquet\").load(enriched_path)\r\n",
					"\r\n",
					"deltaTable.alias(\"catalog_sales\").merge(\r\n",
					"     updatesDF.alias(\"updates\"),\r\n",
					"     \"catalog_sales.cs_order_number = updates.cs_order_number and catalog_sales.cs_item_sk = updates.cs_item_sk \") \\\r\n",
					"   .whenMatchedUpdate(set = \r\n",
					"        {\r\n",
					"            \"cs_sold_date_sk\":\"updates.cs_sold_date_sk\",\r\n",
					"            \"cs_sold_time_sk\":\"updates.cs_sold_time_sk\",\r\n",
					"            \"cs_ship_date_sk\":\"updates.cs_ship_date_sk\",\r\n",
					"            \"cs_bill_customer_sk\":\"updates.cs_bill_customer_sk\",\r\n",
					"            \"cs_bill_cdemo_sk\":\"updates.cs_bill_cdemo_sk\",\r\n",
					"            \"cs_bill_hdemo_sk\":\"updates.cs_bill_hdemo_sk\",\r\n",
					"            \"cs_bill_addr_sk\":\"updates.cs_bill_addr_sk\",\r\n",
					"            \"cs_ship_customer_sk\":\"updates.cs_ship_customer_sk\",\r\n",
					"            \"cs_ship_cdemo_sk\":\"updates.cs_ship_cdemo_sk\",\r\n",
					"            \"cs_ship_hdemo_sk\":\"updates.cs_ship_hdemo_sk\",\r\n",
					"            \"cs_ship_addr_sk\":\"updates.cs_ship_addr_sk\",\r\n",
					"            \"cs_call_center_sk\":\"updates.cs_call_center_sk\",\r\n",
					"            \"cs_catalog_page_sk\":\"updates.cs_catalog_page_sk\",\r\n",
					"            \"cs_ship_mode_sk\":\"updates.cs_ship_mode_sk\",\r\n",
					"            \"cs_warehouse_sk\":\"updates.cs_warehouse_sk\",           \r\n",
					"            \"cs_promo_sk\":\"updates.cs_promo_sk\",            \r\n",
					"            \"cs_quantity\":\"updates.cs_quantity\",\r\n",
					"            \"cs_wholesale_cost\":\"updates.cs_wholesale_cost\",\r\n",
					"            \"cs_list_price\":\"updates.cs_list_price\",\r\n",
					"            \"cs_sales_price\":\"updates.cs_sales_price\",\r\n",
					"            \"cs_ext_discount_amt\":\"updates.cs_ext_discount_amt\",\r\n",
					"            \"cs_ext_sales_price\":\"updates.cs_ext_sales_price\",\r\n",
					"            \"cs_ext_wholesale_cost\":\"updates.cs_ext_wholesale_cost\",\r\n",
					"            \"cs_ext_list_price\":\"updates.cs_ext_list_price\",\r\n",
					"            \"cs_ext_tax\":\"updates.cs_ext_tax\",\r\n",
					"            \"cs_coupon_amt\":\"updates.cs_coupon_amt\",\r\n",
					"            \"cs_ext_ship_cost\":\"updates.cs_ext_ship_cost\",\r\n",
					"            \"cs_net_paid\":\"updates.cs_net_paid\",\r\n",
					"            \"cs_net_paid_inc_tax\":\"updates.cs_net_paid_inc_tax\",\r\n",
					"            \"cs_net_paid_inc_ship\":\"updates.cs_net_paid_inc_ship\",\r\n",
					"            \"cs_net_paid_inc_ship_tax\":\"updates.cs_net_paid_inc_ship_tax\",\r\n",
					"            \"cs_net_profit\":\"updates.cs_net_profit\"\r\n",
					"        } \r\n",
					"    ) \\\r\n",
					"   .whenNotMatchedInsert(values =\r\n",
					"     {         \r\n",
					"        \"cs_sold_date_sk\":\"updates.cs_sold_date_sk\",\r\n",
					"        \"cs_sold_time_sk\":\"updates.cs_sold_time_sk\",\r\n",
					"        \"cs_ship_date_sk\":\"updates.cs_ship_date_sk\",\r\n",
					"        \"cs_bill_customer_sk\":\"updates.cs_bill_customer_sk\",\r\n",
					"        \"cs_bill_cdemo_sk\":\"updates.cs_bill_cdemo_sk\",\r\n",
					"        \"cs_bill_hdemo_sk\":\"updates.cs_bill_hdemo_sk\",\r\n",
					"        \"cs_bill_addr_sk\":\"updates.cs_bill_addr_sk\",\r\n",
					"        \"cs_ship_customer_sk\":\"updates.cs_ship_customer_sk\",\r\n",
					"        \"cs_ship_cdemo_sk\":\"updates.cs_ship_cdemo_sk\",\r\n",
					"        \"cs_ship_hdemo_sk\":\"updates.cs_ship_hdemo_sk\",\r\n",
					"        \"cs_ship_addr_sk\":\"updates.cs_ship_addr_sk\",\r\n",
					"        \"cs_call_center_sk\":\"updates.cs_call_center_sk\",\r\n",
					"        \"cs_catalog_page_sk\":\"updates.cs_catalog_page_sk\",\r\n",
					"        \"cs_ship_mode_sk\":\"updates.cs_ship_mode_sk\",\r\n",
					"        \"cs_warehouse_sk\":\"updates.cs_warehouse_sk\",\r\n",
					"        \"cs_item_sk\":\"updates.cs_item_sk\",\r\n",
					"        \"cs_promo_sk\":\"updates.cs_promo_sk\",\r\n",
					"        \"cs_order_number\":\"updates.cs_order_number\",\r\n",
					"        \"cs_quantity\":\"updates.cs_quantity\",\r\n",
					"        \"cs_wholesale_cost\":\"updates.cs_wholesale_cost\",\r\n",
					"        \"cs_list_price\":\"updates.cs_list_price\",\r\n",
					"        \"cs_sales_price\":\"updates.cs_sales_price\",\r\n",
					"        \"cs_ext_discount_amt\":\"updates.cs_ext_discount_amt\",\r\n",
					"        \"cs_ext_sales_price\":\"updates.cs_ext_sales_price\",\r\n",
					"        \"cs_ext_wholesale_cost\":\"updates.cs_ext_wholesale_cost\",\r\n",
					"        \"cs_ext_list_price\":\"updates.cs_ext_list_price\",\r\n",
					"        \"cs_ext_tax\":\"updates.cs_ext_tax\",\r\n",
					"        \"cs_coupon_amt\":\"updates.cs_coupon_amt\",\r\n",
					"        \"cs_ext_ship_cost\":\"updates.cs_ext_ship_cost\",\r\n",
					"        \"cs_net_paid\":\"updates.cs_net_paid\",\r\n",
					"        \"cs_net_paid_inc_tax\":\"updates.cs_net_paid_inc_tax\",\r\n",
					"        \"cs_net_paid_inc_ship\":\"updates.cs_net_paid_inc_ship\",\r\n",
					"        \"cs_net_paid_inc_ship_tax\":\"updates.cs_net_paid_inc_ship_tax\",\r\n",
					"        \"cs_net_profit\":\"updates.cs_net_profit\"\r\n",
					"     }\r\n",
					"   ) \\\r\n",
					"   .execute()"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from delta.tables import *\r\n",
					"domain = \"catalog_returns\"\r\n",
					"\r\n",
					"deltaTable = DeltaTable.forPath(spark, curated_adls_path + domain)\r\n",
					"\r\n",
					"enriched_path = enriched_adls_path + now.strftime(\"%Y-%m-%d\") + '/' + domain + '/*.parquet'\r\n",
					"updatesDF = spark.read.format(\"parquet\").load(enriched_path)\r\n",
					"\r\n",
					"deltaTable.alias(\"catalog_returns\").merge(\r\n",
					"     updatesDF.alias(\"updates\"),\r\n",
					"     \"catalog_returns.cr_order_number = updates.cr_order_number and catalog_returns.cr_item_sk = updates.cr_item_sk \") \\\r\n",
					"   .whenMatchedUpdate(set = \r\n",
					"        {\r\n",
					"            \"cr_returned_date_sk\":\"updates.cr_returned_date_sk\",\r\n",
					"            \"cr_returned_time_sk\":\"updates.cr_returned_time_sk\",\r\n",
					"            \"cr_refunded_customer_sk\":\"updates.cr_refunded_customer_sk\",\r\n",
					"            \"cr_refunded_cdemo_sk\":\"updates.cr_refunded_cdemo_sk\",\r\n",
					"            \"cr_refunded_hdemo_sk\":\"updates.cr_refunded_hdemo_sk\",\r\n",
					"            \"cr_refunded_addr_sk\":\"updates.cr_refunded_addr_sk\",\r\n",
					"            \"cr_returning_customer_sk\":\"updates.cr_returning_customer_sk\",\r\n",
					"            \"cr_returning_cdemo_sk\":\"updates.cr_returning_cdemo_sk\",\r\n",
					"            \"cr_returning_hdemo_sk\":\"updates.cr_returning_hdemo_sk\",\r\n",
					"            \"cr_returning_addr_sk\":\"updates.cr_returning_addr_sk\",\r\n",
					"            \"cr_call_center_sk\":\"updates.cr_call_center_sk\",\r\n",
					"            \"cr_catalog_page_sk\":\"updates.cr_catalog_page_sk\",\r\n",
					"            \"cr_ship_mode_sk\":\"updates.cr_ship_mode_sk\",\r\n",
					"            \"cr_warehouse_sk\":\"updates.cr_warehouse_sk\",\r\n",
					"            \"cr_reason_sk\":\"updates.cr_reason_sk\",\r\n",
					"            \"cr_return_quantity\":\"updates.cr_return_quantity\",\r\n",
					"            \"cr_return_amount\":\"updates.cr_return_amount\",\r\n",
					"            \"cr_return_tax\":\"updates.cr_return_tax\",\r\n",
					"            \"cr_return_amt_inc_tax\":\"updates.cr_return_amt_inc_tax\",\r\n",
					"            \"cr_fee\":\"updates.cr_fee\",\r\n",
					"            \"cr_return_ship_cost\":\"updates.cr_return_ship_cost\",\r\n",
					"            \"cr_refunded_cash\":\"updates.cr_refunded_cash\",\r\n",
					"            \"cr_reversed_charge\":\"updates.cr_reversed_charge\",\r\n",
					"            \"cr_store_credit\":\"updates.cr_store_credit\",\r\n",
					"            \"cr_net_loss\":\"updates.cr_net_loss\"\r\n",
					"        } \r\n",
					"    ) \\\r\n",
					"   .whenNotMatchedInsert(values =\r\n",
					"     {         \r\n",
					"            \"cr_returned_date_sk\":\"updates.cr_returned_date_sk\",\r\n",
					"            \"cr_returned_time_sk\":\"updates.cr_returned_time_sk\",\r\n",
					"            \"cr_item_sk\":\"updates.cr_item_sk\",\r\n",
					"            \"cr_refunded_customer_sk\":\"updates.cr_refunded_customer_sk\",\r\n",
					"            \"cr_refunded_cdemo_sk\":\"updates.cr_refunded_cdemo_sk\",\r\n",
					"            \"cr_refunded_hdemo_sk\":\"updates.cr_refunded_hdemo_sk\",\r\n",
					"            \"cr_refunded_addr_sk\":\"updates.cr_refunded_addr_sk\",\r\n",
					"            \"cr_returning_customer_sk\":\"updates.cr_returning_customer_sk\",\r\n",
					"            \"cr_returning_cdemo_sk\":\"updates.cr_returning_cdemo_sk\",\r\n",
					"            \"cr_returning_hdemo_sk\":\"updates.cr_returning_hdemo_sk\",\r\n",
					"            \"cr_returning_addr_sk\":\"updates.cr_returning_addr_sk\",\r\n",
					"            \"cr_call_center_sk\":\"updates.cr_call_center_sk\",\r\n",
					"            \"cr_catalog_page_sk\":\"updates.cr_catalog_page_sk\",\r\n",
					"            \"cr_ship_mode_sk\":\"updates.cr_ship_mode_sk\",\r\n",
					"            \"cr_warehouse_sk\":\"updates.cr_warehouse_sk\",\r\n",
					"            \"cr_reason_sk\":\"updates.cr_reason_sk\",\r\n",
					"            \"cr_order_number\":\"updates.cr_order_number\",\r\n",
					"            \"cr_return_quantity\":\"updates.cr_return_quantity\",\r\n",
					"            \"cr_return_amount\":\"updates.cr_return_amount\",\r\n",
					"            \"cr_return_tax\":\"updates.cr_return_tax\",\r\n",
					"            \"cr_return_amt_inc_tax\":\"updates.cr_return_amt_inc_tax\",\r\n",
					"            \"cr_fee\":\"updates.cr_fee\",\r\n",
					"            \"cr_return_ship_cost\":\"updates.cr_return_ship_cost\",\r\n",
					"            \"cr_refunded_cash\":\"updates.cr_refunded_cash\",\r\n",
					"            \"cr_reversed_charge\":\"updates.cr_reversed_charge\",\r\n",
					"            \"cr_store_credit\":\"updates.cr_store_credit\",\r\n",
					"            \"cr_net_loss\":\"updates.cr_net_loss\"\r\n",
					"     }\r\n",
					"   ) \\\r\n",
					"   .execute()"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from delta.tables import *\r\n",
					"domain = \"customer\"\r\n",
					"\r\n",
					"deltaTable = DeltaTable.forPath(spark, curated_adls_path + domain)\r\n",
					"\r\n",
					"enriched_path = enriched_adls_path + now.strftime(\"%Y-%m-%d\") + '/' + domain + '/*.parquet'\r\n",
					"updatesDF = spark.read.format(\"parquet\").load(enriched_path)\r\n",
					"\r\n",
					"deltaTable.alias(\"customer\").merge(\r\n",
					"     updatesDF.alias(\"updates\"),\r\n",
					"     \"customer.c_customer_sk = updates.c_customer_sk\") \\\r\n",
					"   .whenMatchedUpdate(set = \r\n",
					"        {            \r\n",
					"            \"c_customer_id\":\"updates.c_customer_id\",\r\n",
					"            \"c_current_cdemo_sk\":\"updates.c_current_cdemo_sk\",\r\n",
					"            \"c_current_hdemo_sk\":\"updates.c_current_hdemo_sk\",\r\n",
					"            \"c_current_addr_sk\":\"updates.c_current_addr_sk\",\r\n",
					"            \"c_first_shipto_date_sk\":\"updates.c_first_shipto_date_sk\",\r\n",
					"            \"c_first_sales_date_sk\":\"updates.c_first_sales_date_sk\",\r\n",
					"            \"c_salutation\":\"updates.c_salutation\",\r\n",
					"            \"c_first_name\":\"updates.c_first_name\",\r\n",
					"            \"c_last_name\":\"updates.c_last_name\",\r\n",
					"            \"c_preferred_cust_flag\":\"updates.c_preferred_cust_flag\",\r\n",
					"            \"c_birth_day\":\"updates.c_birth_day\",\r\n",
					"            \"c_birth_month\":\"updates.c_birth_month\",\r\n",
					"            \"c_birth_year\":\"updates.c_birth_year\",\r\n",
					"            \"c_birth_country\":\"updates.c_birth_country\",\r\n",
					"            \"c_login\":\"updates.c_login\",\r\n",
					"            \"c_email_address\":\"updates.c_email_address\",\r\n",
					"            \"c_last_review_date\":\"updates.c_last_review_date\"\r\n",
					"        } \r\n",
					"    ) \\\r\n",
					"   .whenNotMatchedInsert(values =\r\n",
					"     {         \r\n",
					"            \"c_customer_sk\":\"updates.c_customer_sk\",\r\n",
					"            \"c_customer_id\":\"updates.c_customer_id\",\r\n",
					"            \"c_current_cdemo_sk\":\"updates.c_current_cdemo_sk\",\r\n",
					"            \"c_current_hdemo_sk\":\"updates.c_current_hdemo_sk\",\r\n",
					"            \"c_current_addr_sk\":\"updates.c_current_addr_sk\",\r\n",
					"            \"c_first_shipto_date_sk\":\"updates.c_first_shipto_date_sk\",\r\n",
					"            \"c_first_sales_date_sk\":\"updates.c_first_sales_date_sk\",\r\n",
					"            \"c_salutation\":\"updates.c_salutation\",\r\n",
					"            \"c_first_name\":\"updates.c_first_name\",\r\n",
					"            \"c_last_name\":\"updates.c_last_name\",\r\n",
					"            \"c_preferred_cust_flag\":\"updates.c_preferred_cust_flag\",\r\n",
					"            \"c_birth_day\":\"updates.c_birth_day\",\r\n",
					"            \"c_birth_month\":\"updates.c_birth_month\",\r\n",
					"            \"c_birth_year\":\"updates.c_birth_year\",\r\n",
					"            \"c_birth_country\":\"updates.c_birth_country\",\r\n",
					"            \"c_login\":\"updates.c_login\",\r\n",
					"            \"c_email_address\":\"updates.c_email_address\",\r\n",
					"            \"c_last_review_date\":\"updates.c_last_review_date\"\r\n",
					"     }\r\n",
					"   ) \\\r\n",
					"   .execute()"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from delta.tables import *\r\n",
					"domain = \"customer_address\"\r\n",
					"\r\n",
					"deltaTable = DeltaTable.forPath(spark, curated_adls_path + domain)\r\n",
					"\r\n",
					"enriched_path = enriched_adls_path + now.strftime(\"%Y-%m-%d\") + '/' + domain + '/*.parquet'\r\n",
					"updatesDF = spark.read.format(\"parquet\").load(enriched_path)\r\n",
					"\r\n",
					"deltaTable.alias(\"customer_address\").merge(\r\n",
					"     updatesDF.alias(\"updates\"),\r\n",
					"     \"customer_address.ca_address_sk = updates.ca_address_sk\") \\\r\n",
					"   .whenMatchedUpdate(set = \r\n",
					"        {            \r\n",
					"            \"ca_address_id\":\"updates.ca_address_id\",\r\n",
					"            \"ca_street_number\":\"updates.ca_street_number\",\r\n",
					"            \"ca_street_name\":\"updates.ca_street_name\",\r\n",
					"            \"ca_street_type\":\"updates.ca_street_type\",\r\n",
					"            \"ca_suite_number\":\"updates.ca_suite_number\",\r\n",
					"            \"ca_city\":\"updates.ca_city\",\r\n",
					"            \"ca_county\":\"updates.ca_county\",\r\n",
					"            \"ca_state\":\"updates.ca_state\",\r\n",
					"            \"ca_zip\":\"updates.ca_zip\",\r\n",
					"            \"ca_country\":\"updates.ca_country\",\r\n",
					"            \"ca_gmt_offset\":\"updates.ca_gmt_offset\",\r\n",
					"            \"ca_location_type\":\"updates.ca_location_type\"\r\n",
					"        } \r\n",
					"    ) \\\r\n",
					"   .whenNotMatchedInsert(values =\r\n",
					"     {         \r\n",
					"           \"ca_address_sk\":\"updates.ca_address_sk\",\r\n",
					"            \"ca_address_id\":\"updates.ca_address_id\",\r\n",
					"            \"ca_street_number\":\"updates.ca_street_number\",\r\n",
					"            \"ca_street_name\":\"updates.ca_street_name\",\r\n",
					"            \"ca_street_type\":\"updates.ca_street_type\",\r\n",
					"            \"ca_suite_number\":\"updates.ca_suite_number\",\r\n",
					"            \"ca_city\":\"updates.ca_city\",\r\n",
					"            \"ca_county\":\"updates.ca_county\",\r\n",
					"            \"ca_state\":\"updates.ca_state\",\r\n",
					"            \"ca_zip\":\"updates.ca_zip\",\r\n",
					"            \"ca_country\":\"updates.ca_country\",\r\n",
					"            \"ca_gmt_offset\":\"updates.ca_gmt_offset\",\r\n",
					"            \"ca_location_type\":\"updates.ca_location_type\"\r\n",
					"     }\r\n",
					"   ) \\\r\n",
					"   .execute()"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from delta.tables import *\r\n",
					"domain = \"customer_demographics\"\r\n",
					"\r\n",
					"deltaTable = DeltaTable.forPath(spark, curated_adls_path + domain)\r\n",
					"\r\n",
					"enriched_path = enriched_adls_path + now.strftime(\"%Y-%m-%d\") + '/' + domain + '/*.parquet'\r\n",
					"updatesDF = spark.read.format(\"parquet\").load(enriched_path)\r\n",
					"\r\n",
					"deltaTable.alias(\"customer_demographics\").merge(\r\n",
					"     updatesDF.alias(\"updates\"),\r\n",
					"     \"customer_demographics.cd_demo_sk = updates.cd_demo_sk\") \\\r\n",
					"   .whenMatchedUpdate(set = \r\n",
					"        { \r\n",
					"            \"cd_gender\":\"updates.cd_gender\",\r\n",
					"            \"cd_marital_status\":\"updates.cd_marital_status\",\r\n",
					"            \"cd_education_status\":\"updates.cd_education_status\",\r\n",
					"            \"cd_purchase_estimate\":\"updates.cd_purchase_estimate\",\r\n",
					"            \"cd_credit_rating\":\"updates.cd_credit_rating\",\r\n",
					"            \"cd_dep_count\":\"updates.cd_dep_count\",\r\n",
					"            \"cd_dep_employed_count\":\"updates.cd_dep_employed_count\",\r\n",
					"            \"cd_dep_college_count\":\"updates.cd_dep_college_count\"\r\n",
					"        } \r\n",
					"    ) \\\r\n",
					"   .whenNotMatchedInsert(values =\r\n",
					"     {         \r\n",
					"        \"cd_demo_sk\":\"updates.cd_demo_sk\",\r\n",
					"        \"cd_gender\":\"updates.cd_gender\",\r\n",
					"        \"cd_marital_status\":\"updates.cd_marital_status\",\r\n",
					"        \"cd_education_status\":\"updates.cd_education_status\",\r\n",
					"        \"cd_purchase_estimate\":\"updates.cd_purchase_estimate\",\r\n",
					"        \"cd_credit_rating\":\"updates.cd_credit_rating\",\r\n",
					"        \"cd_dep_count\":\"updates.cd_dep_count\",\r\n",
					"        \"cd_dep_employed_count\":\"updates.cd_dep_employed_count\",\r\n",
					"        \"cd_dep_college_count\":\"updates.cd_dep_college_count\"\r\n",
					"     }\r\n",
					"   ) \\\r\n",
					"   .execute()"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from delta.tables import *\r\n",
					"domain = \"date_dim\"\r\n",
					"\r\n",
					"deltaTable = DeltaTable.forPath(spark, curated_adls_path + domain)\r\n",
					"\r\n",
					"enriched_path = enriched_adls_path + now.strftime(\"%Y-%m-%d\") + '/' + domain + '/*.parquet'\r\n",
					"updatesDF = spark.read.format(\"parquet\").load(enriched_path)\r\n",
					"\r\n",
					"deltaTable.alias(\"date_dim\").merge(\r\n",
					"     updatesDF.alias(\"updates\"),\r\n",
					"     \"date_dim.d_date_sk = updates.d_date_sk\") \\\r\n",
					"   .whenMatchedUpdate(set = \r\n",
					"        { \r\n",
					"            \"d_date_id\":\"updates.d_date_id\",\r\n",
					"            \"d_date\":\"updates.d_date\",\r\n",
					"            \"d_month_seq\":\"updates.d_month_seq\",\r\n",
					"            \"d_week_seq\":\"updates.d_week_seq\",\r\n",
					"            \"d_quarter_seq\":\"updates.d_quarter_seq\",\r\n",
					"            \"d_year\":\"updates.d_year\",\r\n",
					"            \"d_dow\":\"updates.d_dow\",\r\n",
					"            \"d_moy\":\"updates.d_moy\",\r\n",
					"            \"d_dom\":\"updates.d_dom\",\r\n",
					"            \"d_qoy\":\"updates.d_qoy\",\r\n",
					"            \"d_fy_year\":\"updates.d_fy_year\",\r\n",
					"            \"d_fy_quarter_seq\":\"updates.d_fy_quarter_seq\",\r\n",
					"            \"d_fy_week_seq\":\"updates.d_fy_week_seq\",\r\n",
					"            \"d_day_name\":\"updates.d_day_name\",\r\n",
					"            \"d_quarter_name\":\"updates.d_quarter_name\",\r\n",
					"            \"d_holiday\":\"updates.d_holiday\",\r\n",
					"            \"d_weekend\":\"updates.d_weekend\",\r\n",
					"            \"d_following_holiday\":\"updates.d_following_holiday\",\r\n",
					"            \"d_first_dom\":\"updates.d_first_dom\",\r\n",
					"            \"d_last_dom\":\"updates.d_last_dom\",\r\n",
					"            \"d_same_day_ly\":\"updates.d_same_day_ly\",\r\n",
					"            \"d_same_day_lq\":\"updates.d_same_day_lq\",\r\n",
					"            \"d_current_day\":\"updates.d_current_day\",\r\n",
					"            \"d_current_week\":\"updates.d_current_week\",\r\n",
					"            \"d_current_month\":\"updates.d_current_month\",\r\n",
					"            \"d_current_quarter\":\"updates.d_current_quarter\",\r\n",
					"            \"d_current_year\":\"updates.d_current_year\"\r\n",
					"        } \r\n",
					"    ) \\\r\n",
					"   .whenNotMatchedInsert(values =\r\n",
					"     {         \r\n",
					"            \"d_date_sk\":\"updates.d_date_sk\",\r\n",
					"            \"d_date_id\":\"updates.d_date_id\",\r\n",
					"            \"d_date\":\"updates.d_date\",\r\n",
					"            \"d_month_seq\":\"updates.d_month_seq\",\r\n",
					"            \"d_week_seq\":\"updates.d_week_seq\",\r\n",
					"            \"d_quarter_seq\":\"updates.d_quarter_seq\",\r\n",
					"            \"d_year\":\"updates.d_year\",\r\n",
					"            \"d_dow\":\"updates.d_dow\",\r\n",
					"            \"d_moy\":\"updates.d_moy\",\r\n",
					"            \"d_dom\":\"updates.d_dom\",\r\n",
					"            \"d_qoy\":\"updates.d_qoy\",\r\n",
					"            \"d_fy_year\":\"updates.d_fy_year\",\r\n",
					"            \"d_fy_quarter_seq\":\"updates.d_fy_quarter_seq\",\r\n",
					"            \"d_fy_week_seq\":\"updates.d_fy_week_seq\",\r\n",
					"            \"d_day_name\":\"updates.d_day_name\",\r\n",
					"            \"d_quarter_name\":\"updates.d_quarter_name\",\r\n",
					"            \"d_holiday\":\"updates.d_holiday\",\r\n",
					"            \"d_weekend\":\"updates.d_weekend\",\r\n",
					"            \"d_following_holiday\":\"updates.d_following_holiday\",\r\n",
					"            \"d_first_dom\":\"updates.d_first_dom\",\r\n",
					"            \"d_last_dom\":\"updates.d_last_dom\",\r\n",
					"            \"d_same_day_ly\":\"updates.d_same_day_ly\",\r\n",
					"            \"d_same_day_lq\":\"updates.d_same_day_lq\",\r\n",
					"            \"d_current_day\":\"updates.d_current_day\",\r\n",
					"            \"d_current_week\":\"updates.d_current_week\",\r\n",
					"            \"d_current_month\":\"updates.d_current_month\",\r\n",
					"            \"d_current_quarter\":\"updates.d_current_quarter\",\r\n",
					"            \"d_current_year\":\"updates.d_current_year\"\r\n",
					"     }\r\n",
					"   ) \\\r\n",
					"   .execute()"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from delta.tables import *\r\n",
					"domain = \"item\"\r\n",
					"\r\n",
					"deltaTable = DeltaTable.forPath(spark, curated_adls_path + domain)\r\n",
					"\r\n",
					"enriched_path = enriched_adls_path + now.strftime(\"%Y-%m-%d\") + '/' + domain + '/*.parquet'\r\n",
					"updatesDF = spark.read.format(\"parquet\").load(enriched_path)\r\n",
					"\r\n",
					"deltaTable.alias(\"item\").merge(\r\n",
					"     updatesDF.alias(\"updates\"),\r\n",
					"     \"item.i_item_sk = updates.i_item_sk\") \\\r\n",
					"   .whenMatchedUpdate(set = \r\n",
					"        {             \r\n",
					"            \"i_item_id\":\"updates.i_item_id\",\r\n",
					"            \"i_rec_start_date\":\"updates.i_rec_start_date\",\r\n",
					"            \"i_rec_end_date\":\"updates.i_rec_end_date\",\r\n",
					"            \"i_item_desc\":\"updates.i_item_desc\",\r\n",
					"            \"i_current_price\":\"updates.i_current_price\",\r\n",
					"            \"i_wholesale_cost\":\"updates.i_wholesale_cost\",\r\n",
					"            \"i_brand_id\":\"updates.i_brand_id\",\r\n",
					"            \"i_brand\":\"updates.i_brand\",\r\n",
					"            \"i_class_id\":\"updates.i_class_id\",\r\n",
					"            \"i_class\":\"updates.i_class\",\r\n",
					"            \"i_category_id\":\"updates.i_category_id\",\r\n",
					"            \"i_category\":\"updates.i_category\",\r\n",
					"            \"i_manufact_id\":\"updates.i_manufact_id\",\r\n",
					"            \"i_manufact\":\"updates.i_manufact\",\r\n",
					"            \"i_size\":\"updates.i_size\",\r\n",
					"            \"i_formulation\":\"updates.i_formulation\",\r\n",
					"            \"i_color\":\"updates.i_color\",\r\n",
					"            \"i_units\":\"updates.i_units\",\r\n",
					"            \"i_container\":\"updates.i_container\",\r\n",
					"            \"i_manager_id\":\"updates.i_manager_id\",\r\n",
					"            \"i_product_name\":\"updates.i_product_name\"\r\n",
					"        } \r\n",
					"    ) \\\r\n",
					"   .whenNotMatchedInsert(values =\r\n",
					"     {         \r\n",
					"        \"i_item_sk\":\"updates.i_item_sk\",\r\n",
					"        \"i_item_id\":\"updates.i_item_id\",\r\n",
					"        \"i_rec_start_date\":\"updates.i_rec_start_date\",\r\n",
					"        \"i_rec_end_date\":\"updates.i_rec_end_date\",\r\n",
					"        \"i_item_desc\":\"updates.i_item_desc\",\r\n",
					"        \"i_current_price\":\"updates.i_current_price\",\r\n",
					"        \"i_wholesale_cost\":\"updates.i_wholesale_cost\",\r\n",
					"        \"i_brand_id\":\"updates.i_brand_id\",\r\n",
					"        \"i_brand\":\"updates.i_brand\",\r\n",
					"        \"i_class_id\":\"updates.i_class_id\",\r\n",
					"        \"i_class\":\"updates.i_class\",\r\n",
					"        \"i_category_id\":\"updates.i_category_id\",\r\n",
					"        \"i_category\":\"updates.i_category\",\r\n",
					"        \"i_manufact_id\":\"updates.i_manufact_id\",\r\n",
					"        \"i_manufact\":\"updates.i_manufact\",\r\n",
					"        \"i_size\":\"updates.i_size\",\r\n",
					"        \"i_formulation\":\"updates.i_formulation\",\r\n",
					"        \"i_color\":\"updates.i_color\",\r\n",
					"        \"i_units\":\"updates.i_units\",\r\n",
					"        \"i_container\":\"updates.i_container\",\r\n",
					"        \"i_manager_id\":\"updates.i_manager_id\",\r\n",
					"        \"i_product_name\":\"updates.i_product_name\"\r\n",
					"     }\r\n",
					"   ) \\\r\n",
					"   .execute()"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from delta.tables import *\r\n",
					"domain = \"promotion\"\r\n",
					"\r\n",
					"deltaTable = DeltaTable.forPath(spark, curated_adls_path + domain)\r\n",
					"\r\n",
					"enriched_path = enriched_adls_path + now.strftime(\"%Y-%m-%d\") + '/' + domain + '/*.parquet'\r\n",
					"updatesDF = spark.read.format(\"parquet\").load(enriched_path)\r\n",
					"\r\n",
					"deltaTable.alias(\"promotion\").merge(\r\n",
					"     updatesDF.alias(\"updates\"),\r\n",
					"     \"promotion.p_promo_sk = updates.p_promo_sk\") \\\r\n",
					"   .whenMatchedUpdate(set = \r\n",
					"        {  \r\n",
					"            \"p_promo_id\":\"updates.p_promo_id\",\r\n",
					"            \"p_start_date_sk\":\"updates.p_start_date_sk\",\r\n",
					"            \"p_end_date_sk\":\"updates.p_end_date_sk\",\r\n",
					"            \"p_item_sk\":\"updates.p_item_sk\",\r\n",
					"            \"p_cost\":\"updates.p_cost\",\r\n",
					"            \"p_response_target\":\"updates.p_response_target\",\r\n",
					"            \"p_promo_name\":\"updates.p_promo_name\",\r\n",
					"            \"p_channel_dmail\":\"updates.p_channel_dmail\",\r\n",
					"            \"p_channel_email\":\"updates.p_channel_email\",\r\n",
					"            \"p_channel_catalog\":\"updates.p_channel_catalog\",\r\n",
					"            \"p_channel_tv\":\"updates.p_channel_tv\",\r\n",
					"            \"p_channel_radio\":\"updates.p_channel_radio\",\r\n",
					"            \"p_channel_press\":\"updates.p_channel_press\",\r\n",
					"            \"p_channel_event\":\"updates.p_channel_event\",\r\n",
					"            \"p_channel_demo\":\"updates.p_channel_demo\",\r\n",
					"            \"p_channel_details\":\"updates.p_channel_details\",\r\n",
					"            \"p_purpose\":\"updates.p_purpose\",\r\n",
					"            \"p_discount_active\":\"updates.p_discount_active\"\r\n",
					"        } \r\n",
					"    ) \\\r\n",
					"   .whenNotMatchedInsert(values =\r\n",
					"     {         \r\n",
					"        \"p_promo_sk\":\"updates.p_promo_sk\",\r\n",
					"        \"p_promo_id\":\"updates.p_promo_id\",\r\n",
					"        \"p_start_date_sk\":\"updates.p_start_date_sk\",\r\n",
					"        \"p_end_date_sk\":\"updates.p_end_date_sk\",\r\n",
					"        \"p_item_sk\":\"updates.p_item_sk\",\r\n",
					"        \"p_cost\":\"updates.p_cost\",\r\n",
					"        \"p_response_target\":\"updates.p_response_target\",\r\n",
					"        \"p_promo_name\":\"updates.p_promo_name\",\r\n",
					"        \"p_channel_dmail\":\"updates.p_channel_dmail\",\r\n",
					"        \"p_channel_email\":\"updates.p_channel_email\",\r\n",
					"        \"p_channel_catalog\":\"updates.p_channel_catalog\",\r\n",
					"        \"p_channel_tv\":\"updates.p_channel_tv\",\r\n",
					"        \"p_channel_radio\":\"updates.p_channel_radio\",\r\n",
					"        \"p_channel_press\":\"updates.p_channel_press\",\r\n",
					"        \"p_channel_event\":\"updates.p_channel_event\",\r\n",
					"        \"p_channel_demo\":\"updates.p_channel_demo\",\r\n",
					"        \"p_channel_details\":\"updates.p_channel_details\",\r\n",
					"        \"p_purpose\":\"updates.p_purpose\",\r\n",
					"        \"p_discount_active\":\"updates.p_discount_active\"\r\n",
					"     }\r\n",
					"   ) \\\r\n",
					"   .execute()"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from delta.tables import *\r\n",
					"domain = \"warehouse\"\r\n",
					"\r\n",
					"deltaTable = DeltaTable.forPath(spark, curated_adls_path + domain)\r\n",
					"\r\n",
					"enriched_path = enriched_adls_path + now.strftime(\"%Y-%m-%d\") + '/' + domain + '/*.parquet'\r\n",
					"updatesDF = spark.read.format(\"parquet\").load(enriched_path)\r\n",
					"\r\n",
					"deltaTable.alias(\"warehouse\").merge(\r\n",
					"     updatesDF.alias(\"updates\"),\r\n",
					"     \"warehouse.w_warehouse_sk = updates.w_warehouse_sk\") \\\r\n",
					"   .whenMatchedUpdate(set = \r\n",
					"        {          \r\n",
					"            \"w_warehouse_name\":\"updates.w_warehouse_name\",\r\n",
					"            \"w_warehouse_sq_ft\":\"updates.w_warehouse_sq_ft\",\r\n",
					"            \"w_street_number\":\"updates.w_street_number\",\r\n",
					"            \"w_street_name\":\"updates.w_street_name\",\r\n",
					"            \"w_street_type\":\"updates.w_street_type\",\r\n",
					"            \"w_suite_number\":\"updates.w_suite_number\",\r\n",
					"            \"w_city\":\"updates.w_city\",\r\n",
					"            \"w_county\":\"updates.w_county\",\r\n",
					"            \"w_state\":\"updates.w_state\",\r\n",
					"            \"w_zip\":\"updates.w_zip\",\r\n",
					"            \"w_country\":\"updates.w_country\",\r\n",
					"            \"w_gmt_offset\":\"updates.w_gmt_offset\"\r\n",
					"        } \r\n",
					"    ) \\\r\n",
					"   .whenNotMatchedInsert(values =\r\n",
					"     {         \r\n",
					"        \"w_warehouse_sk\":\"updates.w_warehouse_sk\",\r\n",
					"        \"w_warehouse_id\":\"updates.w_warehouse_id\",\r\n",
					"        \"w_warehouse_name\":\"updates.w_warehouse_name\",\r\n",
					"        \"w_warehouse_sq_ft\":\"updates.w_warehouse_sq_ft\",\r\n",
					"        \"w_street_number\":\"updates.w_street_number\",\r\n",
					"        \"w_street_name\":\"updates.w_street_name\",\r\n",
					"        \"w_street_type\":\"updates.w_street_type\",\r\n",
					"        \"w_suite_number\":\"updates.w_suite_number\",\r\n",
					"        \"w_city\":\"updates.w_city\",\r\n",
					"        \"w_county\":\"updates.w_county\",\r\n",
					"        \"w_state\":\"updates.w_state\",\r\n",
					"        \"w_zip\":\"updates.w_zip\",\r\n",
					"        \"w_country\":\"updates.w_country\",\r\n",
					"        \"w_gmt_offset\":\"updates.w_gmt_offset\"\r\n",
					"     }\r\n",
					"   ) \\\r\n",
					"   .execute()"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from delta.tables import *\r\n",
					"domain = \"inventory\"\r\n",
					"\r\n",
					"deltaTable = DeltaTable.forPath(spark, curated_adls_path + domain)\r\n",
					"\r\n",
					"enriched_path = enriched_adls_path + now.strftime(\"%Y-%m-%d\") + '/' + domain + '/*.parquet'\r\n",
					"updatesDF = spark.read.format(\"parquet\").load(enriched_path)\r\n",
					"\r\n",
					"deltaTable.alias(\"inventory\").merge(\r\n",
					"     updatesDF.alias(\"updates\"),\r\n",
					"     \"inventory.inv_date_sk = updates.inv_date_sk and inventory.inv_item_sk = updates.inv_item_sk and inventory.inv_warehouse_sk = updates.inv_warehouse_sk\") \\\r\n",
					"   .whenMatchedUpdate(set = \r\n",
					"        {             \r\n",
					"            \"inv_quantity_on_hand\":\"updates.inv_quantity_on_hand\"\r\n",
					"        } \r\n",
					"    ) \\\r\n",
					"   .whenNotMatchedInsert(values =\r\n",
					"     {         \r\n",
					"            \"inv_date_sk\":\"updates.inv_date_sk\",\r\n",
					"            \"inv_item_sk\":\"updates.inv_item_sk\",\r\n",
					"            \"inv_warehouse_sk\":\"updates.inv_warehouse_sk\",\r\n",
					"            \"inv_quantity_on_hand\":\"updates.inv_quantity_on_hand\"\r\n",
					"     }\r\n",
					"   ) \\\r\n",
					"   .execute()"
				]
			}
		]
	}
}