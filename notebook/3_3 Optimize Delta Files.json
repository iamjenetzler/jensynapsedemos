{
	"name": "3_3 Optimize Delta Files",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkpool1",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "112g",
			"driverCores": 16,
			"executorMemory": "112g",
			"executorCores": 16,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "d13b1ff6-0c1e-4db1-8cef-73eaf0ddd4ba"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/b9913441-8a8e-4fb1-812a-9fcbe1dd9aba/resourceGroups/synapsehack/providers/Microsoft.Synapse/workspaces/synapsehackws/bigDataPools/sparkpool1",
				"name": "sparkpool1",
				"type": "Spark",
				"endpoint": "https://synapsehackws.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpool1",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "3.1",
				"nodeCount": 10,
				"cores": 16,
				"memory": 112,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Optimize data"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# this could be paramterized by domain\r\n",
					"\r\n",
					"from delta.tables import *\r\n",
					"\r\n",
					"# Set the strorage path info\r\n",
					"account_name = 'synapsehackstor' # fill in your primary storage account name\r\n",
					"\r\n",
					"curated_container = 'curated' # fill in your container name\r\n",
					"curated_adls_path = 'abfss://%s@%s.dfs.core.windows.net/' % (curated_container, account_name)\r\n",
					"\r\n",
					"print(curated_adls_path)"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"domain = \"catalog_returns\"\r\n",
					"\r\n",
					"delta_table = DeltaTable.forPath(spark, curated_adls_path + domain)\r\n",
					"delta_table.optimize().show"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"domain = \"call_center\"\r\n",
					"\r\n",
					"delta_table = DeltaTable.forPath(spark, curated_adls_path + domain)\r\n",
					"delta_table.optimize().show"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"domain = \"catalog_sales\"\r\n",
					"\r\n",
					"delta_table = DeltaTable.forPath(spark, curated_adls_path + domain)\r\n",
					"delta_table.optimize().show"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"domain = \"customer\"\r\n",
					"\r\n",
					"delta_table = DeltaTable.forPath(spark, curated_adls_path + domain)\r\n",
					"delta_table.optimize().show"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"domain = \"customer_address\"\r\n",
					"\r\n",
					"delta_table = DeltaTable.forPath(spark, curated_adls_path + domain)\r\n",
					"delta_table.optimize().show"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"domain = \"customer_demographics\"\r\n",
					"\r\n",
					"delta_table = DeltaTable.forPath(spark, curated_adls_path + domain)\r\n",
					"delta_table.optimize().show"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"domain = \"date_dim\"\r\n",
					"\r\n",
					"delta_table = DeltaTable.forPath(spark, curated_adls_path + domain)\r\n",
					"delta_table.optimize().show"
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"domain = \"inventory\"\r\n",
					"\r\n",
					"delta_table = DeltaTable.forPath(spark, curated_adls_path + domain)\r\n",
					"delta_table.optimize().show"
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"domain = \"item\"\r\n",
					"\r\n",
					"delta_table = DeltaTable.forPath(spark, curated_adls_path + domain)\r\n",
					"delta_table.optimize().show"
				],
				"execution_count": 10
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"domain = \"promotion\"\r\n",
					"\r\n",
					"delta_table = DeltaTable.forPath(spark, curated_adls_path + domain)\r\n",
					"delta_table.optimize().show"
				],
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"domain = \"warehouse\"\r\n",
					"\r\n",
					"delta_table = DeltaTable.forPath(spark, curated_adls_path + domain)\r\n",
					"delta_table.optimize().show"
				],
				"execution_count": 12
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Check performance without optimize"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "scala"
					}
				},
				"source": [
					"%%spark \r\n",
					"\r\n",
					"def measure(f : => Unit) {\r\n",
					"    val start = System.nanoTime\r\n",
					"    f\r\n",
					"    val durationInMS = (System.nanoTime - start) / 1000 / 1000\r\n",
					"    println(\"duration(ms): \" + durationInMS )\r\n",
					"}"
				],
				"execution_count": 13
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "scala"
					}
				},
				"source": [
					"%%spark \r\n",
					"\r\n",
					"val dataPath = \"abfss://curated@synapsehackstor.dfs.core.windows.net/inventory\"\r\n",
					"\r\n",
					"\r\n",
					"// Use version 0 for non-optimized data\r\n",
					"val df = spark.read.format(\"delta\").option(\"versionAsOf\", \"0\").load(dataPath)\r\n",
					"val agg = df.agg(avg(\"inv_quantity_on_hand\"))\r\n",
					"\r\n",
					"measure(println(agg.collect))"
				],
				"execution_count": 14
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Check performance after optimize"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "scala"
					}
				},
				"source": [
					"%%spark \r\n",
					"\r\n",
					"// Use the latest version for optimized data\r\n",
					"val df = spark.read.format(\"delta\").load(dataPath)\r\n",
					"val agg = df.agg(avg(\"inv_quantity_on_hand\"))\r\n",
					"measure(println(agg.collect))"
				],
				"execution_count": 15
			}
		]
	}
}